version: "3.9"

services:
  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  mongodb:
    image: mongo:6
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  kafka:
    image: bitnami/kafka:4.0.0-debian-12-r9
    container_name: kafka
    environment:
      - KAFKA_ENABLE_KRAFT=${KAFKA_ENABLE_KRAFT}
      - KAFKA_CFG_NODE_ID=${KAFKA_BROKER_ID}
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  keycloak:
    image: bitnami/keycloak:26.3.3-debian-12-r0
    container_name: keycloak
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  config-server:
    build: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - keycloak  # Jeśli config potrzebuje security, inaczej usuń
    networks:
      - app-network

  service-registry:
    build: ./service-registry
    container_name: service-registry
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - config-server
    networks:
      - app-network

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - service-registry
      - keycloak
    networks:
      - app-network

  project-service:
    build: ./project-service
    container_name: project-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      service-registry:
        condition: service_started
      keycloak:
        condition: service_healthy
    networks:
      - app-network

  employee-service:
    build: ./employee-service
    container_name: employee-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      service-registry:
        condition: service_started
      keycloak:
        condition: service_healthy
    networks:
      - app-network

  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      service-registry:
        condition: service_started
      keycloak:
        condition: service_healthy
    networks:
      - app-network

volumes:
  postgres_data:
  mongo_data:
  kafka_data:

networks:
  app-network:
    driver: bridge