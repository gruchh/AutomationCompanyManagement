version: '3.9'

services:
  postgres:
    image: postgres:17
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  mongodb:
    image: mongo:6
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:9092,CONTROLLER://kafka:29093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - kafka_data:/tmp/kraft-combined-logs
    networks:
      - app-network

  keycloak:
    image: keycloak/keycloak:26.0
    container_name: keycloak
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${KEYCLOAK_POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_PROXY: edge
    ports:
      - "8180:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  config-server:
    build:
      context: .
      dockerfile: ./infrastructure/config-server/Dockerfile
    container_name: config-server
    restart: unless-stopped
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: native
    networks:
      - app-network

  service-registry:
    build:
      context: .
      dockerfile: ./infrastructure/service-registry/Dockerfile
    container_name: service-registry
    restart: unless-stopped
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_CONFIG_IMPORT: ${SPRING_CONFIG_IMPORT}
    depends_on:
      - config-server
    networks:
      - app-network

  api-gateway:
    build:
      context: .
      dockerfile: ./infrastructure/api-gateway/Dockerfile
    container_name: api-gateway
    restart: unless-stopped
    ports:
      - "${API_GATEWAY_PORT}:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_CONFIG_IMPORT: ${SPRING_CONFIG_IMPORT}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
    depends_on:
      - service-registry
    networks:
      - app-network

  employee-service:
    build:
      context: .
      dockerfile: ./services/employee-service/Dockerfile
    container_name: employee-service
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_CONFIG_IMPORT: ${SPRING_CONFIG_IMPORT}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${EMPLOYEES_POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${EMPLOYEES_POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${EMPLOYEES_POSTGRES_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - app-network

  project-service:
    build:
      context: .
      dockerfile: ./services/project-service/Dockerfile
    container_name: project-service
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_CONFIG_IMPORT: ${SPRING_CONFIG_IMPORT}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${PROJECTS_POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${PROJECTS_POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${PROJECTS_POSTGRES_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - app-network

  notification-service:
    build:
      context: .
      dockerfile: ./services/notification-service/Dockerfile
    container_name: notification-service
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_CONFIG_IMPORT: ${SPRING_CONFIG_IMPORT}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/notifications
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      mongodb:
        condition: service_healthy
      service-registry:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      - api-gateway
    environment:
      - NODE_ENV=production
    networks:
      - app-network

volumes:
  postgres_data:
  mongo_data:
  kafka_data:

networks:
  app-network:
    driver: bridge
