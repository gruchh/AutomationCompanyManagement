version: "3.9"

services:
  postgres:
    image: postgres:17
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  mongodb:
    image: mongo:6
    container_name: mongodb
    restart: unless-stopped
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  kafka:
    image: bitnamilegacy/kafka:4.0.0-debian-12-r10
    container_name: kafka
    restart: unless-stopped
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - app-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.5
    container_name: keycloak
    command: start
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HOSTNAME: keycloak
      KC_HOSTNAME_STRICT: false
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  config-server:
    build: infrastructure/config-server
    container_name: config-server
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: prod
    depends_on:
      keycloak:
        condition: service_started
    networks:
      - app-network

  service-registry:
    build: infrastructure/service-registry
    container_name: service-registry
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: prod
    depends_on:
      config-server:
        condition: service_started
    networks:
      - app-network

  api-gateway:
    build: infrastructure/api-gateway
    container_name: api-gateway
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: prod
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
    depends_on:
      service-registry:
        condition: service_started
      keycloak:
        condition: service_started
    networks:
      - app-network

  project-service:
    build: ./project-service
    container_name: project-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      service-registry:
        condition: service_started
      keycloak:
        condition: service_started
    networks:
      - app-network

  employee-service:
    build: ./employee-service
    container_name: employee-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      service-registry:
        condition: service_started
      keycloak:
        condition: service_started
    networks:
      - app-network

  notification-service:
    build: ./notification-service
    container_name: notification-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: prod
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started
      service-registry:
        condition: service_started
      keycloak:
        condition: service_started
    networks:
      - app-network

volumes:
  postgres_data:
  mongo_data:
  kafka_data:

networks:
  app-network:
    driver: bridge